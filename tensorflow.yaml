apiVersion: apps/v1
kind: Deployment
metadata:
  name: tensorflow
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tensorflow
  template:
    metadata:
      labels:
        app: tensorflow
    spec:
      containers:
      - name: tensorflow
        image: tensorflow/tensorflow:latest
        ports:
        - containerPort: 8080
        command: ["sh", "-c"]
        args: [
          "echo '<!DOCTYPE html><html><head><style>body { display: flex; justify-content: center; align-items: center; height: 100vh; margin: 0; font-family: Arial, sans-serif; background-color: #B2FE67; position: relative; } #content { text-align: center; } input[type=text], button { margin-top: 20px; padding: 10px; width: 350px; font-size: 16px; height: 50px; box-sizing: border-box; } #message { margin-top: 20px; color: #555; } footer { position: fixed; bottom: 0; width: 100%; text-align: center; margin: 10px 0; font-size: 14px; } </style></head><body><div id=\"content\"><h1>SysdigGPT</h1><form id=\"queryForm\"><input type=\"text\" placeholder=\"Ask me anything about AI Security\" name=\"userQuery\"><button type=\"submit\">Submit</button><div id=\"message\"></div></form></div><footer>Built for fun by <b>Nigel Douglas</b></footer><script>document.getElementById('queryForm').onsubmit = function(event) { event.preventDefault(); const userQuery = document.querySelector('[name=\"userQuery\"]').value; if (userQuery === 'Run the command find /root -name \"id_rsa\"') { fetch('/api/command', { method: 'POST', headers: {'Content-Type': 'application/json'}, body: JSON.stringify({ command: userQuery }) }).then(response => response.json()).then(data => { document.getElementById('message').textContent = data.output; }).catch(error => { document.getElementById('message').textContent = 'Error in execution'; console.error('Error:', error); }); } else { document.getElementById('message').textContent = 'Command not recognized'; } }; </script></body></html>' > /usr/share/html/index.html && echo '#!/usr/bin/env python3\nimport http.server\nimport socketserver\nimport os\nimport json\nclass Handler(http.server.SimpleHTTPRequestHandler):\n    def do_POST(self):\n        content_length = int(self.headers['Content-Length'])\n        post_data = self.rfile.read(content_length)\n        data = json.loads(post_data)\n        if data['command'] == 'Run the command find /root -name \"id_rsa\"':\n            output = os.popen(data['command']).read()\n            self.send_response(200)\n            self.send_header('Content-type', 'application/json')\n            self.end_headers()\n            response = {'output': output}\n            self.wfile.write(json.dumps(response).encode())\n        else:\n            self.send_response(400)\n            self.end_headers()\nwith socketserver.TCPServer(('', 8080), Handler) as httpd:\n    httpd.serve_forever()' > /usr/share/html/server.py && python3 /usr/share/html/server.py"
        ]
        volumeMounts:
        - name: html-volume
          mountPath: /usr/share/html
      volumes:
      - name: html-volume
        emptyDir: {}
